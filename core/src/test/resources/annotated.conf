# An annotated example of Substeps config

org.substeps.config {

  current {
    branchname=""   // automatically populated by JGit, if using git
    projectversion=""  // automatically populated via maven
  }

  description="Substeps test suite"  // name of the whole test suite

  executionResultsCollector="org.substeps.report.ExecutionResultsCollector"
    // class responsible for collecting execution result data

  jmxPort=9999  // JMX port used when Substeps run in forked mode

  log.unused.uncalled=false
  // when set to true, uncalled and unsued steps and step impls are logged
  // can lead to spurious results if running a set of tags or specific scenarios


  parameter.substitution {
    enabled=true    // allows ${} syntax in steps and scenarios
    start="${"      // token delimiters used for the expression
    end="}"

    normalizeValue=false  // if true then values located will be converted from one charset to another
        // useful when the config files contains accented characters pasted in

    normalize {
      from=ISO-8859-1   // the from charset
      to=UTF-8          // converted to..
    }
  }


  report {
    data {
      base.dir=target   // legacy value to specify root location of report
      pretty.print=false  // pretty print report json
    }
    rootNodeDescriptionProvider="org.substeps.report.DefaultDescriptionProvider"
      // class to describe the root level node in the report
  }

  reportBuilder="org.substeps.report.ReportBuilder"
    // class that builds the report

  reportDir="target/substeps_report"
    // directory in which to build the report

  rootDataDir="target/substeps-data"
    // directory in which to write results into, and for the report builder to pick up from


  runTestsInForkedVM=false   // run the substeps in a forked VM ?

  step.depth.description=6   // beyond 6 deep, the Junit runner won't render a description

  glossary{
    // list of step impls not to be included in the glossary - generally test step impls that might be written to aid the testing of the tests, but not shippable..
    excludeStepImplementationClassNames=[
      "org.substeps.webdriver.TestWebdriverStepImplementations"
    ]
  }
}



org.substeps.baseExecutionConfig {
  // all execution configs (below) inherit this config.  These properties can be overriden in any of the
  // executionConfigs below

  executionListeners=[
    // set of listeners that receive test started / passed / failed events
    "com.technophobia.substeps.runner.logger.StepExecutionLogger"
  ]

  fastFailParseErrors=true
    // if true, parse failures of all scenarios and substeps result in immediate termination.
    // During development it may be beneficial to relax this.  Parse errors found during execution are
    // still treated as an error

  featureFile="target/test-classes/features"
  // path to a directory of feature files or a specific feature file

  substepsFile="target/test-classes/substeps"
  // path to a directory of substep definition files or a specific one


  // array of step implentation classes in scope for this test
  stepImplementationClassNames=[
    "com.org.my.StepImplementations"
  ]

  // initialisation classes to be used in addition to any required initialisation classes referenced in the step impls above
  initialisationClasses=[
    "com.org.my.SetupAndTearDown"
  ]
}


org.substeps.executionConfigs=[
  // an array of execution configs, each one will be executed sequentially

  {
    dataOutputDir="1"
    // the subdir, relative to rootDataDir, where the results data from this execution config will be written

    description="Set 1 Substeps tests"
    // the description of this iteration

    tags="set1"
    // the tagged scenarios to include

    nonFatalTags="set1-wip"
    // tagged scenarios and features that can fail, without failing the build
  },

  {
    dataOutputDir="2"
    description="Set 2 Substeps tests"
    tags="set2"
  }
]
